/**
 * Generated by Verge3D Puzzles v.3.8.0
 * Tue Nov 02 2021 03:20:17 GMT-0600 (hora est√°ndar central)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

"use strict";

(function () {
  // global variables/constants used by puzzles' functions

  var LIST_NONE = "<none>";

  var _pGlob = {};

  _pGlob.objCache = {};
  _pGlob.fadeAnnotations = true;
  _pGlob.pickedObject = "";
  _pGlob.hoveredObject = "";
  _pGlob.mediaElements = {};
  _pGlob.loadedFile = "";
  _pGlob.states = [];
  _pGlob.percentage = 0;
  _pGlob.openedFile = "";
  _pGlob.xrSessionAcquired = false;
  _pGlob.xrSessionCallbacks = [];
  _pGlob.screenCoords = new v3d.Vector2();
  _pGlob.intervalTimers = {};

  _pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
  _pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
  _pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
  _pGlob.MIN_DRAG_SCALE = 10e-4;
  _pGlob.SET_OBJ_ROT_EPS = 1e-8;

  _pGlob.vec2Tmp = new v3d.Vector2();
  _pGlob.vec2Tmp2 = new v3d.Vector2();
  _pGlob.vec3Tmp = new v3d.Vector3();
  _pGlob.vec3Tmp2 = new v3d.Vector3();
  _pGlob.vec3Tmp3 = new v3d.Vector3();
  _pGlob.vec3Tmp4 = new v3d.Vector3();
  _pGlob.eulerTmp = new v3d.Euler();
  _pGlob.eulerTmp2 = new v3d.Euler();
  _pGlob.quatTmp = new v3d.Quaternion();
  _pGlob.quatTmp2 = new v3d.Quaternion();
  _pGlob.colorTmp = new v3d.Color();
  _pGlob.mat4Tmp = new v3d.Matrix4();
  _pGlob.planeTmp = new v3d.Plane();
  _pGlob.raycasterTmp = new v3d.Raycaster();

  var PL = (v3d.PL = v3d.PL || {});

  // a more readable alias for PL (stands for "Puzzle Logic")
  v3d.puzzles = PL;

  PL.procedures = PL.procedures || {};

  PL.execInitPuzzles = function (options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
      initOptions: {
        fadeAnnotations: true,
        useBkgTransp: false,
        preserveDrawBuf: false,
        useCompAssets: false,
        useFullscreen: true,
        useCustomPreloader: false,
        preloaderStartCb: function () {},
        preloaderProgressCb: function () {},
        preloaderEndCb: function () {},
      },
    };

    // provide the container's id to puzzles that need access to the container
    _initGlob.container =
      options !== undefined && "container" in options ? options.container : "";

    var PROC = {};

    // utility functions envoked by the HTML puzzles
    function getElements(ids, isParent) {
      var elems = [];
      if (
        Array.isArray(ids) &&
        ids[0] != "CONTAINER" &&
        ids[0] != "WINDOW" &&
        ids[0] != "DOCUMENT" &&
        ids[0] != "BODY" &&
        ids[0] != "QUERYSELECTOR"
      ) {
        for (var i = 0; i < ids.length; i++)
          elems.push(getElement(ids[i], isParent));
      } else {
        elems.push(getElement(ids, isParent));
      }
      return elems;
    }

    function getElement(id, isParent) {
      var elem;
      if (Array.isArray(id) && id[0] == "CONTAINER") {
        if (appInstance !== null) {
          elem = appInstance.container;
        } else if (typeof _initGlob !== "undefined") {
          // if we are on the initialization stage, we still can have access
          // to the container element
          var id = _initGlob.container;
          if (isParent) {
            elem = parent.document.getElementById(id);
          } else {
            elem = document.getElementById(id);
          }
        }
      } else if (Array.isArray(id) && id[0] == "WINDOW") {
        if (isParent) elem = parent;
        else elem = window;
      } else if (Array.isArray(id) && id[0] == "DOCUMENT") {
        if (isParent) elem = parent.document;
        else elem = document;
      } else if (Array.isArray(id) && id[0] == "BODY") {
        if (isParent) elem = parent.document.body;
        else elem = document.body;
      } else if (Array.isArray(id) && id[0] == "QUERYSELECTOR") {
        if (isParent) elem = parent.document.querySelector(id);
        else elem = document.querySelector(id);
      } else {
        if (isParent) elem = parent.document.getElementById(id);
        else elem = document.getElementById(id);
      }
      return elem;
    }

    // setHTMLElemAttribute puzzle
    function setHTMLElemAttribute(attr, value, ids, isParent) {
      var elems = getElements(ids, isParent);
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === "style") {
          // NOTE: setting an attribute 'style' instead of a property 'style'
          // fixes IE11 wrong behavior
          elem.setAttribute(attr, value);
        } else if (
          (attr == "href" || attr == "src") &&
          value instanceof Promise
        ) {
          // resolve promise value for url-based attributes
          value.then(function (response) {
            elem[attr] = response;
          });
        } else {
          elem[attr] = value;
        }
      }
    }

    // setHTMLElemStyle puzzle
    function setHTMLElemStyle(prop, value, ids, isParent) {
      var elems = getElements(ids, isParent);
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style) continue;
        elem.style[prop] = value;
      }
    }

    // initSettings puzzle
    _initGlob.output.initOptions.fadeAnnotations = false;
    _initGlob.output.initOptions.useBkgTransp = false;
    _initGlob.output.initOptions.preserveDrawBuf = false;
    _initGlob.output.initOptions.useCompAssets = true;
    _initGlob.output.initOptions.useFullscreen = false;

    // initPreloader puzzle
    _initGlob.output.initOptions.useCustomPreloader = true;
    _initGlob.output.initOptions.preloaderStartCb = function () {
      _initGlob.percentage = 0;
      (function () {})();
    };
    _initGlob.output.initOptions.preloaderProgressCb = function (percentage) {
      _initGlob.percentage = percentage;
      (function () {
        setHTMLElemAttribute(
          "innerHTML",
          String(Math.round(_initGlob.percentage)) + "%",
          "percentage",
          false
        );
        setHTMLElemAttribute(
          "style",
          [
            "stroke-dashoffset: ",
            472 - (472 * Math.round(_initGlob.percentage)) / 100,
            ";",
          ].join(""),
          "circle",
          false
        );
      })();
    };
    _initGlob.output.initOptions.preloaderEndCb = function () {
      _initGlob.percentage = 100;
      (function () {
        setHTMLElemStyle("display", "none", "preloader_screen", false);
      })();
    };

    return _initGlob.output;
  };

  PL.init = function (appInstance, initOptions) {
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = appInstance;

    initOptions = initOptions || {};

    if ("fadeAnnotations" in initOptions) {
      _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
    }

    this.procedures["reproducirAnimacion+"] = reproducirAnimacion_;
    this.procedures["reposiscionarPersonaje"] = reposiscionarPersonaje;
    this.procedures["AlinearObjetosRedesSociales"] =
      AlinearObjetosRedesSociales;
    this.procedures["AlinearObjetosRedesSocialesprensa"] =
      AlinearObjetosRedesSocialesprensa;
    this.procedures["EconderPrensa"] = EconderPrensa;
    this.procedures["EsconderParametrosNoEncontrados"] =
      EsconderParametrosNoEncontrados;
    this.procedures["VerificarStandPrensa"] = VerificarStandPrensa;
    this.procedures["VerifcarIconoStand"] = VerifcarIconoStand;

    var PROC = {
      "reproducirAnimacion+": reproducirAnimacion_,
      reposiscionarPersonaje: reposiscionarPersonaje,
      AlinearObjetosRedesSociales: AlinearObjetosRedesSociales,
      AlinearObjetosRedesSocialesprensa: AlinearObjetosRedesSocialesprensa,
      EconderPrensa: EconderPrensa,
      EsconderParametrosNoEncontrados: EsconderParametrosNoEncontrados,
      VerificarStandPrensa: VerificarStandPrensa,
      VerifcarIconoStand: VerifcarIconoStand,
    };

    var isZoom,
      pdf,
      video_test_jose,
      ColorOBject,
      input_range_start,
      input_range_end,
      result_range_start,
      result_range_end,
      input_value,
      J,
      pickedObject,
      navigationFPS,
      position,
      OpenMap,
      SoundHover,
      RedesSocilaesEspeciales2,
      RedesSocialesPrensa,
      Json,
      n,
      po,
      JsonUrls,
      picked_object,
      p,
      soundPopUp,
      i,
      paths,
      boolInformacion,
      music,
      camera_y,
      touch_1_busy,
      result_range,
      output_value,
      DosUltimasLetras,
      PositionsOfCameras,
      RedesSocialesEspeciales1,
      nameUrlPlus,
      openB2bConference,
      varHovered,
      soundTeleport,
      isPlay,
      maxBreakingForce_multiplier,
      RedesSVerticales,
      ListaAlinearRS,
      TemporalObj,
      Var2Ultimasletras,
      soundClose,
      o,
      mapaSopund,
      tmeporaOutline,
      is_music_play,
      NameURLPrensa,
      equipo3d,
      urlEquipos,
      video,
      camera_x,
      CondicionalResposicionamiento,
      soundInformaicon,
      temporalSuma,
      redesSolcaulke,
      m,
      game_started,
      rr,
      gg,
      touch_1_base_y,
      touch_1_y_length,
      bb,
      SecondFor,
      maxBreakingForce,
      actions,
      summ_damage;

    // utility function envoked by almost all V3D-specific puzzles
    // filter off some non-mesh types
    function notIgnoredObj(obj) {
      return (
        obj.type !== "AmbientLight" &&
        obj.name !== "" &&
        !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
        !obj.isAuxClippingMesh
      );
    }

    // utility function envoked by almost all V3D-specific puzzles
    // find first occurence of the object by its name
    function getObjectByName(objName) {
      var objFound;
      var runTime = _pGlob !== undefined;
      objFound = runTime ? _pGlob.objCache[objName] : null;

      if (objFound && objFound.name === objName) return objFound;

      appInstance.scene.traverse(function (obj) {
        if (!objFound && notIgnoredObj(obj) && obj.name == objName) {
          objFound = obj;
          if (runTime) {
            _pGlob.objCache[objName] = objFound;
          }
        }
      });
      return objFound;
    }

    // utility function envoked by almost all V3D-specific puzzles
    // retrieve all objects on the scene
    function getAllObjectNames() {
      var objNameList = [];
      appInstance.scene.traverse(function (obj) {
        if (notIgnoredObj(obj)) objNameList.push(obj.name);
      });
      return objNameList;
    }

    // utility function envoked by almost all V3D-specific puzzles
    // retrieve all objects which belong to the group
    function getObjectNamesByGroupName(targetGroupName) {
      var objNameList = [];
      appInstance.scene.traverse(function (obj) {
        if (notIgnoredObj(obj)) {
          var groupNames = obj.groupNames;
          if (!groupNames) return;
          for (var i = 0; i < groupNames.length; i++) {
            var groupName = groupNames[i];
            if (groupName == targetGroupName) {
              objNameList.push(obj.name);
            }
          }
        }
      });
      return objNameList;
    }

    // utility function envoked by almost all V3D-specific puzzles
    // process object input, which can be either single obj or array of objects, or a group
    function retrieveObjectNames(objNames) {
      var acc = [];
      retrieveObjectNamesAcc(objNames, acc);
      return acc.filter(function (name) {
        return name;
      });
    }

    function retrieveObjectNamesAcc(currObjNames, acc) {
      if (typeof currObjNames == "string") {
        acc.push(currObjNames);
      } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++) acc.push(newObj[i]);
      } else if (
        Array.isArray(currObjNames) &&
        currObjNames[0] == "ALL_OBJECTS"
      ) {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++) acc.push(newObj[i]);
      } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
          retrieveObjectNamesAcc(currObjNames[i], acc);
      }
    }

    // setActiveCamera puzzle
    function setActiveCamera(camName) {
      var camera = getObjectByName(camName);
      if (!camera || !camera.isCamera || appInstance.getCamera() == camera)
        return;
      appInstance.setCamera(camera);
    }

    function MediaHTML5(isVideo) {
      this.source = null;
    }

    Object.assign(MediaHTML5.prototype, {
      load: function (url, isVideo) {
        if (isVideo) {
          this.source = document.createElement("video");
          this.source.playsInline = true;
          this.source.preload = "auto";
          this.source.autoload = true;
          this.source.crossOrigin = "anonymous";
        } else {
          this.source = document.createElement("audio");
        }

        this.source.src = url;
        return this;
      },

      play: function () {
        this.source.play();
      },

      pause: function () {
        this.source.pause();
      },

      stop: function () {
        this.source.pause();
        this.source.currentTime = 0;
      },

      rewind: function () {
        this.source.currentTime = 0;
      },

      setPlaybackTime: function (time) {
        this.source.currentTime = time;
      },

      getPlaybackTime: function () {
        return this.source.currentTime;
      },

      setPlaybackRate: function (rate) {
        this.source.playbackRate = rate;
      },

      isPlaying: function () {
        return this.source.duration > 0 && !this.source.paused;
      },

      setLoop: function (looped) {
        this.source.loop = looped;
      },

      setVolume: function (volume) {
        this.source.volume = volume;
      },

      setMuted: function (muted) {
        this.source.muted = muted;
      },
    });

    // loadVideo puzzle
    function loadVideo(url) {
      var elems = _pGlob.mediaElements;
      if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url, true);
      }
      return elems[url];
    }

    /**
     * Retreive standard accessible textures for MeshNodeMaterial or MeshStandardMaterial.
     * If "collectSameNameMats" is true then all materials in the scene with the given name will
     * be used for collecting textures, otherwise will be used only the first found material (default behavior).
     */
    function matGetEditableTextures(matName, collectSameNameMats) {
      var mats = [];
      if (collectSameNameMats) {
        mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
      } else {
        var firstMat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (firstMat !== null) {
          mats = [firstMat];
        }
      }

      var textures = mats.reduce(function (texArray, mat) {
        var matTextures = [];
        switch (mat.type) {
          case "MeshNodeMaterial":
            matTextures = Object.values(mat.nodeTextures);
            break;

          case "MeshStandardMaterial":
            matTextures = [
              mat.map,
              mat.lightMap,
              mat.aoMap,
              mat.emissiveMap,
              mat.bumpMap,
              mat.normalMap,
              mat.displacementMap,
              mat.roughnessMap,
              mat.metalnessMap,
              mat.alphaMap,
              mat.envMap,
            ];
            break;

          default:
            console.error(
              "matGetEditableTextures: Unknown material type " + mat.type
            );
            break;
        }

        Array.prototype.push.apply(texArray, matTextures);
        return texArray;
      }, []);

      return textures.filter(function (elem) {
        // check Texture type exactly
        return (
          elem &&
          (elem.constructor == v3d.Texture ||
            elem.constructor == v3d.DataTexture ||
            elem.constructor == v3d.VideoTexture)
        );
      });
    }

    /**
     * Replace accessible textures for MeshNodeMaterial or MeshStandardMaterial
     */
    function matReplaceEditableTexture(mat, oldTex, newTex) {
      switch (mat.type) {
        case "MeshNodeMaterial":
          for (var name in mat.nodeTextures) {
            if (mat.nodeTextures[name] == oldTex) {
              mat.nodeTextures[name] = newTex;
            }
          }

          break;

        case "MeshStandardMaterial":
          var texNames = [
            "map",
            "lightMap",
            "aoMap",
            "emissiveMap",
            "bumpMap",
            "normalMap",
            "displacementMap",
            "roughnessMap",
            "metalnessMap",
            "alphaMap",
            "envMap",
          ];

          texNames.forEach(function (name) {
            if (mat[name] == oldTex) {
              mat[name] = newTex;
            }
          });

          break;

        default:
          console.error(
            "matReplaceEditableTexture: Unsupported material type " + mat.type
          );
          break;
      }

      // inherit some save params
      newTex.encoding = oldTex.encoding;
      newTex.wrapS = oldTex.wrapS;
      newTex.wrapT = oldTex.wrapT;
    }

    // replaceTexture puzzle
    function replaceTexture(matName, texName, texUrlOrElem, doCb) {
      var textures = matGetEditableTextures(matName, true).filter(function (
        elem
      ) {
        return elem.name == texName;
      });

      if (!textures.length) return;

      if (texUrlOrElem instanceof Promise) {
        texUrlOrElem.then(
          function (response) {
            processImageUrl(response);
          },
          function (error) {}
        );
      } else if (typeof texUrlOrElem == "string") {
        processImageUrl(texUrlOrElem);

        /**
         * NOTE: not checking for the MediaHTML5 constructor, because otherwise this
         * puzzle would always provide the code that's not needed most of the time
         */
      } else if (
        texUrlOrElem instanceof Object &&
        texUrlOrElem.source instanceof HTMLVideoElement
      ) {
        processVideo(texUrlOrElem.source);
      } else if (texUrlOrElem instanceof HTMLCanvasElement) {
        processCanvas(texUrlOrElem);
      } else {
        return;
      }

      function processImageUrl(url) {
        var isHDR = url.search(/\.hdr$/) > 0;

        if (!isHDR) {
          var loader = new v3d.ImageLoader();
          loader.setCrossOrigin("Anonymous");
        } else {
          var loader = new v3d.FileLoader();
          loader.setResponseType("arraybuffer");
        }

        loader.load(url, function (image) {
          // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
          var isJPEG =
            url.search(/\.(jpg|jpeg)$/) > 0 ||
            url.search(/^data\:image\/jpeg/) === 0;

          textures.forEach(function (elem) {
            if (!isHDR) {
              elem.image = image;
            } else {
              // parse loaded HDR buffer
              var rgbeLoader = new v3d.RGBELoader();
              var texData = rgbeLoader.parse(image);

              // NOTE: reset params since the texture may be converted to float
              elem.type = v3d.UnsignedByteType;
              elem.encoding = v3d.RGBEEncoding;

              elem.image = {
                data: texData.data,
                width: texData.width,
                height: texData.height,
              };

              elem.magFilter = v3d.LinearFilter;
              elem.minFilter = v3d.LinearFilter;
              elem.generateMipmaps = false;
              elem.isDataTexture = true;
            }

            elem.format = isJPEG ? v3d.RGBFormat : v3d.RGBAFormat;
            elem.needsUpdate = true;

            // update world material if it is using this texture
            if (
              appInstance.scene !== null &&
              appInstance.scene.worldMaterial !== null
            ) {
              var wMat = appInstance.scene.worldMaterial;
              for (var texName in wMat.nodeTextures) {
                if (wMat.nodeTextures[texName] == elem) {
                  appInstance.updateEnvironment(wMat);
                }
              }
            }
          });

          // exec once
          doCb();
        });
      }

      function processVideo(elem) {
        var videoTex = new v3d.VideoTexture(elem);
        videoTex.flipY = false;
        videoTex.name = texName;

        var videoAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function (mat) {
          textures.forEach(function (tex) {
            matReplaceEditableTexture(mat, tex, videoTex);
          });

          mat.needsUpdate = true;
          videoAssigned = true;
        });

        if (videoAssigned) doCb();
      }

      function processCanvas(elem) {
        var canvasTex = new v3d.CanvasTexture(elem);
        canvasTex.flipY = false;
        canvasTex.name = texName;

        var canvasAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function (mat) {
          textures.forEach(function (tex) {
            matReplaceEditableTexture(mat, tex, canvasTex);
          });

          mat.needsUpdate = true;
          canvasAssigned = true;
        });

        if (canvasAssigned) {
          if (v3d.PL) {
            v3d.PL.canvasTextures = v3d.PL.canvasTextures || {};
            v3d.PL.canvasTextures[canvasTex.image.id] = canvasTex;
          }

          doCb();
        }
      }
    }

    // playSound puzzle
    function playSound(mediaElem, loop) {
      if (!mediaElem) return;
      mediaElem.setLoop(loop);
      mediaElem.play();
    }

    /**
     * Get a scene that contains the root of the given action.
     */
    function getSceneByAction(action) {
      var root = action.getRoot();
      var scene = root.type == "Scene" ? root : null;
      root.traverseAncestors(function (ancObj) {
        if (ancObj.type == "Scene") {
          scene = ancObj;
        }
      });
      return scene;
    }

    /**
     * Get the current scene's framerate.
     */
    function getSceneAnimFrameRate(scene) {
      if (
        scene &&
        "v3d" in scene.userData &&
        "animFrameRate" in scene.userData.v3d
      ) {
        return scene.userData.v3d.animFrameRate;
      }
      return 24;
    }

    _pGlob.animMixerCallbacks = [];

    var initAnimationMixer = (function () {
      function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
          if (cb[i][0] == e.action) {
            cb[i][0] = null; // desactivate
            found.push(cb[i][1]);
          }
        }
        for (var i = 0; i < found.length; i++) {
          found[i]();
        }
      }

      return function initAnimationMixer() {
        if (
          appInstance.mixer &&
          !appInstance.mixer.hasEventListener("finished", onMixerFinished)
        )
          appInstance.mixer.addEventListener("finished", onMixerFinished);
      };
    })();

    // animation puzzles
    function operateAnimation(
      operation,
      animations,
      from,
      to,
      loop,
      speed,
      callback,
      isPlayAnimCompat,
      rev
    ) {
      if (!animations) return;
      // input can be either single obj or array of objects
      if (typeof animations == "string") animations = [animations];

      function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(
          appInstance,
          animName
        );
        if (!action) return;
        switch (operation) {
          case "PLAY":
            if (!action.isRunning()) {
              action.reset();
              if (loop && loop != "AUTO") action.loop = v3d[loop];
              var scene = getSceneByAction(action);
              var frameRate = getSceneAnimFrameRate(scene);

              // compatibility reasons: deprecated playAnimation puzzles don't
              // change repetitions
              if (!isPlayAnimCompat) {
                action.repetitions = Infinity;
              }

              var timeScale = Math.abs(parseFloat(speed));
              if (rev) timeScale *= -1;

              action.timeScale = timeScale;
              action.timeStart = from !== null ? from / frameRate : 0;
              if (to !== null) {
                action.getClip().duration = to / frameRate;
              } else {
                action.getClip().resetDuration();
              }
              action.time =
                timeScale >= 0 ? action.timeStart : action.getClip().duration;

              action.paused = false;
              action.play();

              // push unique callbacks only
              var callbacks = _pGlob.animMixerCallbacks;
              var found = false;

              for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action && callbacks[j][1] == callback)
                  found = true;

              if (!found) _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
          case "STOP":
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
              if (callbacks[j][0] == action) {
                callbacks.splice(j, 1);
                j--;
              }

            break;
          case "PAUSE":
            action.paused = true;
            break;
          case "RESUME":
            action.paused = false;
            break;
          case "SET_FRAME":
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from / frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
      }

      for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName) processAnimation(animName);
      }

      initAnimationMixer();
    }

    // utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
    function initObjectPicking(
      callback,
      eventType,
      mouseDownUseTouchStart,
      mouseButtons
    ) {
      var elem = appInstance.renderer.domElement;
      elem.addEventListener(eventType, pickListener);
      if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

      if (eventType == "mousedown") {
        var touchEventName = mouseDownUseTouchStart ? "touchstart" : "touchend";
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
          v3d.PL.editorEventListeners.push([
            elem,
            touchEventName,
            pickListener,
          ]);
      } else if (eventType == "dblclick") {
        var prevTapTime = 0;

        function doubleTapCallback(event) {
          var now = new Date().getTime();
          var timesince = now - prevTapTime;

          if (timesince < 600 && timesince > 0) {
            pickListener(event);
            prevTapTime = 0;
            return;
          }

          prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? "touchstart" : "touchend";
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
          v3d.PL.editorEventListeners.push([
            elem,
            touchEventName,
            doubleTapCallback,
          ]);
      }

      var raycaster = new v3d.Raycaster();

      function pickListener(event) {
        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera()) return;

        event.preventDefault();

        var xNorm = 0,
          yNorm = 0;
        if (event instanceof MouseEvent) {
          if (mouseButtons && mouseButtons.indexOf(event.button) == -1) return;
          xNorm = event.offsetX / elem.clientWidth;
          yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
          var rect = elem.getBoundingClientRect();
          xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
          yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(
          _pGlob.screenCoords,
          appInstance.getCamera(true)
        );
        var objList = [];
        appInstance.scene.traverse(function (obj) {
          objList.push(obj);
        });
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
      }
    }

    function objectsIncludeObj(objNames, testedObjName) {
      if (!testedObjName) return false;

      for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
          return true;
        } else {
          // also check children which are auto-generated for multi-material objects
          var obj = getObjectByName(objNames[i]);
          if (obj && obj.type == "Group") {
            for (var j = 0; j < obj.children.length; j++) {
              if (testedObjName == obj.children[j].name) {
                return true;
              }
            }
          }
        }
      }
      return false;
    }

    // utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
    function getPickedObjectName(obj) {
      // auto-generated from a multi-material object, use parent name instead
      if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
      } else {
        return obj.name;
      }
    }

    // whenClicked puzzle
    function registerOnClick(
      objSelector,
      xRay,
      doubleClick,
      mouseButtons,
      cbDo,
      cbIfMissedDo
    ) {
      // for AR/VR
      _pGlob.objClickInfo = _pGlob.objClickInfo || [];

      _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo],
      });

      initObjectPicking(
        function (intersects, event) {
          var isPicked = false;

          var maxIntersects = xRay
            ? intersects.length
            : Math.min(1, intersects.length);

          for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
              // save the object for the pickedObject block
              _pGlob.pickedObject = objName;
              isPicked = true;
              cbDo(event);
            }
          }

          if (!isPicked) {
            _pGlob.pickedObject = "";
            cbIfMissedDo(event);
          }
        },
        doubleClick ? "dblclick" : "mousedown",
        false,
        mouseButtons
      );
    }

    // Describe this function...
    function reproducirAnimacion_(pickedObject) {
      DosUltimasLetras =
        String(pickedObject.slice(-2)[0]) + String(pickedObject.slice(-1)[0]);
      if (pickedObject == "attendee_1_0" + String(DosUltimasLetras)) {
        operateAnimation(
          "PLAY",
          "whats_att_1_0" + String(DosUltimasLetras),
          1,
          15,
          "LoopOnce",
          1,
          function () {},
          undefined,
          false
        );

        operateAnimation(
          "PLAY",
          "ca_1_0" + String(DosUltimasLetras),
          1,
          15,
          "LoopOnce",
          1,
          function () {},
          undefined,
          false
        );
      } else if (pickedObject == "attendee_2_0" + String(DosUltimasLetras)) {
        operateAnimation(
          "PLAY",
          "whats_att_2_0" + String(DosUltimasLetras),
          1,
          15,
          "LoopOnce",
          1,
          function () {},
          undefined,
          false
        );

        operateAnimation(
          "PLAY",
          "ca_2_0" + String(DosUltimasLetras),
          1,
          15,
          "LoopOnce",
          1,
          function () {},
          undefined,
          false
        );
      }
    }

    // whenHovered puzzle
    initObjectPicking(
      function (intersects, event) {
        var prevHovered = _pGlob.hoveredObject;
        var currHovered = "";

        // the event might happen before hover registration
        _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

        // search for closest hovered object

        var lastIntersectIndex = Infinity;
        _pGlob.objHoverInfo.forEach(function (el) {
          var maxIntersects = el.xRay
            ? intersects.length
            : Math.min(1, intersects.length);

          for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (
              objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) &&
              i <= lastIntersectIndex
            ) {
              currHovered = objName;
              lastIntersectIndex = i;
            }
          }
        });

        if (prevHovered == currHovered) return;

        // first - all "out" callbacks, then - all "over"
        _pGlob.objHoverInfo.forEach(function (el) {
          if (
            objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)
          ) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
          }
        });

        _pGlob.objHoverInfo.forEach(function (el) {
          if (
            objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)
          ) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
          }
        });

        _pGlob.hoveredObject = currHovered;
      },
      "mousemove",
      false
    );

    // whenHovered puzzle
    function registerOnHover(objSelector, xRay, cbOver, cbOut) {
      _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

      _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay,
      });
    }

    /**
     * Retrieve coordinate system from the loaded scene
     */
    function getCoordSystem() {
      var scene = appInstance.scene;

      if (
        scene &&
        "v3d" in scene.userData &&
        "coordSystem" in scene.userData.v3d
      ) {
        return scene.userData.v3d.coordSystem;
      } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return "Z_UP_RIGHT";
      }
    }

    /**
     * Transform coordinates from one space to another
     * Can be used with Vector3 or Euler.
     */
    function coordsTransform(coords, from, to, noSignChange) {
      if (from == to) return coords;

      var y = coords.y,
        z = coords.z;

      if (from == "Z_UP_RIGHT" && to == "Y_UP_RIGHT") {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
      } else if (from == "Y_UP_RIGHT" && to == "Z_UP_RIGHT") {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
      } else {
        console.error("coordsTransform: Unsupported coordinate space");
      }

      return coords;
    }

    /**
     * Verge3D euler rotation to Blender/Max shortest.
     * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
     *    order) via reversion: XYZ -> ZYX
     * 2) swizzle ZYX->YZX
     * 3) choose the shortest rotation to resemble Blender's behavior
     */
    var eulerV3DToBlenderShortest = (function () {
      var eulerTmp = new v3d.Euler();
      var eulerTmp2 = new v3d.Euler();
      var vec3Tmp = new v3d.Vector3();

      return function (euler, dest) {
        var eulerBlender = eulerTmp.copy(euler).reorder("YZX");
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, "Y_UP_RIGHT", "Z_UP_RIGHT");
      };
    })();

    function RotationInterface() {
      /**
       * For user manipulations use XYZ extrinsic rotations (which
       * are the same as ZYX intrinsic rotations)
       *     - Blender/Max/Maya use extrinsic rotations in the UI
       *     - XYZ is the default option, but could be set from
       *       some order hint if exported
       */
      this._userRotation = new v3d.Euler(0, 0, 0, "ZYX");
      this._actualRotation = new v3d.Euler();
    }

    Object.assign(RotationInterface, {
      initObject: function (obj) {
        if (obj.userData.v3d.puzzles === undefined) {
          obj.userData.v3d.puzzles = {};
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
          obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
      },
    });

    Object.assign(RotationInterface.prototype, {
      updateFromObject: function (obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
          this._actualRotation.copy(obj.rotation);
          this._updateUserRotFromActualRot();
        }
      },

      getActualRotation: function (euler) {
        return euler.copy(this._actualRotation);
      },

      setUserRotation: function (euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
      },

      getUserRotation: function (euler) {
        return euler.copy(this._userRotation);
      },

      _updateUserRotFromActualRot: function () {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
      },

      _updateActualRotFromUserRot: function () {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
      },
    });

    // getObjTransform puzzle
    function getObjTransform(objName, mode, coord) {
      if (!objName) return;
      var obj = getObjectByName(objName);
      if (!obj) return;

      var coordSystem = getCoordSystem();

      var transformVal;

      if (mode === "rotation" && coordSystem == "Z_UP_RIGHT") {
        transformVal = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
      } else if (mode === "rotation" && coordSystem == "Y_UP_RIGHT") {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);
      } else {
        transformVal = coordsTransform(
          obj[mode].clone(),
          "Y_UP_RIGHT",
          coordSystem,
          mode === "scale"
        );
      }

      if (mode === "rotation") {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
      }

      if (coord == "xyz") {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
      } else {
        return transformVal[coord];
      }
    }

    // callJSFunction puzzle
    function getJSFunction(funcName) {
      var jsFunc = appInstance.ExternalInterface[funcName];
      if (typeof jsFunc == "function") return jsFunc;
      else return function () {};
    }

    // setInterval puzzle
    function registerInterval(timeout, callback) {
      var timerId = window.setInterval(function () {
        callback(timerId);
      }, 1000 * timeout);
    }

    // utility functions envoked by the HTML puzzles
    function getElements(ids, isParent) {
      var elems = [];
      if (
        Array.isArray(ids) &&
        ids[0] != "CONTAINER" &&
        ids[0] != "WINDOW" &&
        ids[0] != "DOCUMENT" &&
        ids[0] != "BODY" &&
        ids[0] != "QUERYSELECTOR"
      ) {
        for (var i = 0; i < ids.length; i++)
          elems.push(getElement(ids[i], isParent));
      } else {
        elems.push(getElement(ids, isParent));
      }
      return elems;
    }

    function getElement(id, isParent) {
      var elem;
      if (Array.isArray(id) && id[0] == "CONTAINER") {
        if (appInstance !== null) {
          elem = appInstance.container;
        } else if (typeof _initGlob !== "undefined") {
          // if we are on the initialization stage, we still can have access
          // to the container element
          var id = _initGlob.container;
          if (isParent) {
            elem = parent.document.getElementById(id);
          } else {
            elem = document.getElementById(id);
          }
        }
      } else if (Array.isArray(id) && id[0] == "WINDOW") {
        if (isParent) elem = parent;
        else elem = window;
      } else if (Array.isArray(id) && id[0] == "DOCUMENT") {
        if (isParent) elem = parent.document;
        else elem = document;
      } else if (Array.isArray(id) && id[0] == "BODY") {
        if (isParent) elem = parent.document.body;
        else elem = document.body;
      } else if (Array.isArray(id) && id[0] == "QUERYSELECTOR") {
        if (isParent) elem = parent.document.querySelector(id);
        else elem = document.querySelector(id);
      } else {
        if (isParent) elem = parent.document.getElementById(id);
        else elem = document.getElementById(id);
      }
      return elem;
    }

    // setHTMLElemStyle puzzle
    function setHTMLElemStyle(prop, value, ids, isParent) {
      var elems = getElements(ids, isParent);
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style) continue;
        elem.style[prop] = value;
      }
    }

    // setObjTransform puzzle
    function setObjTransform(objSelector, mode, vector, offset) {
      var x = vector[0];
      var y = vector[1];
      var z = vector[2];

      var objNames = retrieveObjectNames(objSelector);

      function setObjProp(obj, prop, val) {
        if (!offset) {
          obj[mode][prop] = val;
        } else {
          if (mode != "scale") obj[mode][prop] += val;
          else obj[mode][prop] *= val;
        }
      }

      var inputsUsed = _pGlob.vec3Tmp.set(
        Number(x !== ""),
        Number(y !== ""),
        Number(z !== "")
      );
      var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

      if (mode === "rotation") {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.MathUtils.DEG2RAD);
      }

      var coordSystem = getCoordSystem();

      coordsTransform(inputsUsed, coordSystem, "Y_UP_RIGHT", true);
      coordsTransform(coords, coordSystem, "Y_UP_RIGHT", mode === "scale");

      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (mode === "rotation" && coordSystem == "Z_UP_RIGHT") {
          // Blender/Max coordinates

          // need all the rotations for order conversions, especially if some
          // inputs are not specified
          var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
          coordsTransform(euler, coordSystem, "Y_UP_RIGHT");

          if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
          if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
          if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

          /**
           * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
           * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
           */
          euler.order = "YZX";
          euler.reorder(obj.rotation.order);
          obj.rotation.copy(euler);
        } else if (mode === "rotation" && coordSystem == "Y_UP_RIGHT") {
          // Maya coordinates

          // Use separate rotation interface to fix ambiguous rotations for Maya,
          // might as well do the same for Blender/Max.

          var rotUI = RotationInterface.initObject(obj);
          var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
          // TODO(ivan): this probably needs some reasonable wrapping
          if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
          if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
          if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

          rotUI.setUserRotation(euler);
          rotUI.getActualRotation(obj.rotation);
        } else {
          if (inputsUsed.x) setObjProp(obj, "x", coords.x);
          if (inputsUsed.y) setObjProp(obj, "y", coords.y);
          if (inputsUsed.z) setObjProp(obj, "z", coords.z);
        }

        obj.updateMatrixWorld(true);
      }
    }

    // setTimeout puzzle
    function registerSetTimeout(timeout, callback) {
      window.setTimeout(callback, 1000 * timeout);
    }

    // Describe this function...
    function reposiscionarPersonaje(position) {
      navigationFPS = true;
      setHTMLElemStyle(
        "filter",
        "blur(8px)",
        ["QUERYSELECTOR", "#v3d-container > canvas"],
        false
      );
      registerSetTimeout(0.2, function () {
        setHTMLElemStyle(
          "filter",
          "blur(0px)",
          ["QUERYSELECTOR", "#v3d-container > canvas"],
          false
        );
        setObjTransform(
          "cam_pos_1",
          "position",
          [
            PositionsOfCameras[position][0],
            PositionsOfCameras[position][1],
            PositionsOfCameras[position][2],
          ],
          false
        );
        setActiveCamera("cam_pos_1");
      });
    }

    // eventHTMLElem puzzle
    function eventHTMLElem(eventType, ids, isParent, callback) {
      var elems = getElements(ids, isParent);
      for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
          v3d.PL.editorEventListeners.push([elem, eventType, callback]);
      }
    }

    // dictGet puzzle
    function dictGet(dict, key) {
      if (dict && typeof dict == "object") return dict[key];
    }

    // Describe this function...
    function AlinearObjetosRedesSociales(Json) {
      for (n = 0; n <= 39; n++) {
        ListaAlinearRS = [];
        if (n < 9) {
          Var2Ultimasletras = String(0) + String(n + 1);
        } else {
          Var2Ultimasletras = n + 1;
        }
        TemporalObj = dictGet(Json[n], "url_facebook");
        if (TemporalObj != null) {
          ListaAlinearRS.push("fb_0" + String(Var2Ultimasletras));
          ListaAlinearRS.push(
            getObjTransform(
              "fb_0" + String(Var2Ultimasletras),
              "position",
              "xyz"
            )
          );
        }
        TemporalObj = dictGet(Json[n], "url_linkedin");
        if (TemporalObj != null) {
          ListaAlinearRS.push("Linkedin_0" + String(Var2Ultimasletras));
          ListaAlinearRS.push(
            getObjTransform(
              "Linkedin_0" + String(Var2Ultimasletras),
              "position",
              "xyz"
            )
          );
        }
        TemporalObj = dictGet(Json[n], "url_twitter");
        if (TemporalObj != null) {
          ListaAlinearRS.push("twitter_0" + String(Var2Ultimasletras));
          ListaAlinearRS.push(
            getObjTransform(
              "twitter_0" + String(Var2Ultimasletras),
              "position",
              "xyz"
            )
          );
        }
        TemporalObj = dictGet(Json[n], "url_web_page");
        if (TemporalObj != null) {
          ListaAlinearRS.push("web_0" + String(Var2Ultimasletras));
          ListaAlinearRS.push(
            getObjTransform(
              "web_0" + String(Var2Ultimasletras),
              "position",
              "xyz"
            )
          );
        }
        if (n == 22 || n == 23) {
          CondicionalResposicionamiento = 1;
        } else if (n == 24 || n == 25) {
          CondicionalResposicionamiento = 1;
        } else if (n == 26 || n == 27) {
          CondicionalResposicionamiento = 1;
        } else if (n == 28) {
          CondicionalResposicionamiento = 2;
        } else if (n == 33) {
          CondicionalResposicionamiento = 2;
        } else if (n == 34 || n == 39) {
          CondicionalResposicionamiento = 2;
        } else {
          CondicionalResposicionamiento = 0;
        }
        if (ListaAlinearRS.length > 0) {
          var p_end = ListaAlinearRS.length - 1;
          var p_inc = 2;
          if (0 > p_end) {
            p_inc = -p_inc;
          }
          for (p = 0; p_inc >= 0 ? p <= p_end : p >= p_end; p += p_inc) {
            if (CondicionalResposicionamiento == 0) {
              setObjTransform(
                ListaAlinearRS[p],
                "position",
                [
                  ListaAlinearRS[p + 1][0],
                  ListaAlinearRS[p + 1][1],
                  RedesSVerticales[p / 2],
                ],
                false
              );
            } else if (CondicionalResposicionamiento == 2) {
              setObjTransform(
                ListaAlinearRS[p],
                "position",
                [
                  ListaAlinearRS[p + 1][0],
                  RedesSocialesEspeciales1[p / 2],
                  ListaAlinearRS[p + 1][2],
                ],
                false
              );
            } else {
              setObjTransform(
                ListaAlinearRS[p],
                "position",
                [
                  ListaAlinearRS[p + 1][0],
                  RedesSocilaesEspeciales2[p / 2],
                  ListaAlinearRS[p + 1][2],
                ],
                false
              );
            }
          }
        }
      }
    }

    // Describe this function...
    function AlinearObjetosRedesSocialesprensa(Json) {
      for (n = 40; n <= 54; n++) {
        ListaAlinearRS = [];
        if (n < 49) {
          Var2Ultimasletras = String(0) + String(n - 39);
        } else {
          Var2Ultimasletras = n - 39;
        }
        TemporalObj = dictGet(Json[n], "url_facebook");
        if (TemporalObj != null) {
          ListaAlinearRS.push("fb_prensa_0" + String(Var2Ultimasletras));
          ListaAlinearRS.push(
            getObjTransform(
              "fb_prensa_0" + String(Var2Ultimasletras),
              "position",
              "xyz"
            )
          );
        }
        TemporalObj = dictGet(Json[n], "url_linkedin");
        if (TemporalObj != null) {
          ListaAlinearRS.push("Linkedin_prensa_0" + String(Var2Ultimasletras));
          ListaAlinearRS.push(
            getObjTransform(
              "Linkedin_prensa_0" + String(Var2Ultimasletras),
              "position",
              "xyz"
            )
          );
        }
        TemporalObj = dictGet(Json[n], "url_twitter");
        if (TemporalObj != null) {
          ListaAlinearRS.push("twitter_prensa_0" + String(Var2Ultimasletras));
          ListaAlinearRS.push(
            getObjTransform(
              "twitter_prensa_0" + String(Var2Ultimasletras),
              "position",
              "xyz"
            )
          );
        }
        TemporalObj = dictGet(Json[n], "url_web_page");
        if (TemporalObj != null) {
          ListaAlinearRS.push("web_prensa_0" + String(Var2Ultimasletras));
          ListaAlinearRS.push(
            getObjTransform(
              "web_prensa_0" + String(Var2Ultimasletras),
              "position",
              "xyz"
            )
          );
        }
        if (ListaAlinearRS.length > 0) {
          var p_end2 = ListaAlinearRS.length - 1;
          var p_inc2 = 2;
          if (0 > p_end2) {
            p_inc2 = -p_inc2;
          }
          for (p = 0; p_inc2 >= 0 ? p <= p_end2 : p >= p_end2; p += p_inc2) {
            setObjTransform(
              ListaAlinearRS[p],
              "position",
              [
                ListaAlinearRS[p + 1][0],
                RedesSocialesPrensa[p / 2],
                ListaAlinearRS[p + 1][2],
              ],
              false
            );
          }
        }
      }
    }

    // removeObject puzzles
    function removeObject(objSelector) {
      var objNames = retrieveObjectNames(objSelector);

      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;
        var obj = getObjectByName(objName);
        if (!obj || !obj.parent) continue;

        obj.parent.remove(obj);

        // clean object cache
        _pGlob.objCache = {};
      }
    }

    // Describe this function...
    function EconderPrensa(Json) {
      for (i = 40; i <= 54; i++) {
        if (i <= 48) {
          TemporalObj = dictGet(Json[i], "url_facebook");
          if (TemporalObj == null) {
            removeObject("fb_prensa_00" + String(i - 39));
          }
          TemporalObj = dictGet(Json[i], "url_linkedin");
          if (TemporalObj == null) {
            removeObject("Linkedin_prensa_00" + String(i - 39));
          }
          TemporalObj = dictGet(Json[i], "url_twitter");
          if (TemporalObj == null) {
            removeObject("twitter_prensa_00" + String(i - 39));
          }
          TemporalObj = dictGet(Json[i], "url_web_page");
          if (TemporalObj == null) {
            removeObject("web_prensa_00" + String(i - 39));
          }
        } else {
          TemporalObj = dictGet(Json[i], "url_facebook");
          if (TemporalObj == null) {
            removeObject("fb_prensa_0" + String(i - 39));
          }
          TemporalObj = dictGet(Json[i], "url_linkedin");
          if (TemporalObj == null) {
            removeObject("Linkedin_prensa_0" + String(i - 39));
          }
          TemporalObj = dictGet(Json[i], "url_twitter");
          if (TemporalObj == null) {
            removeObject("twitter_prensa_0" + String(i - 39));
          }
          TemporalObj = dictGet(Json[i], "url_web_page");
          if (TemporalObj == null) {
            removeObject("web_prensa_0" + String(i - 39));
          }
        }
      }
    }

    // Describe this function...
    function EsconderParametrosNoEncontrados(Json) {
      for (i = 0; i <= 39; i++) {
        TemporalObj = dictGet(Json[i], "staff");
        if (TemporalObj.length == 1) {
          if (i < 9) {
            removeObject("attendee_2_00" + String(i + 1));
          } else {
            removeObject("attendee_2_0" + String(i + 1));
          }
        } else if (TemporalObj.length == 0) {
          if (i < 9) {
            removeObject("attendee_1_00" + String(i + 1));
            removeObject("attendee_2_00" + String(i + 1));
          } else {
            removeObject("attendee_1_0" + String(i + 1));
            removeObject("attendee_2_0" + String(i + 1));
          }
        }
        TemporalObj = dictGet(Json[i], "url_facebook");
        if (TemporalObj == null) {
          if (i < 9) {
            removeObject("fb_00" + String(i + 1));
          } else if (i >= 9) {
            removeObject("fb_0" + String(i + 1));
          }
        }
        TemporalObj = dictGet(Json[i], "url_linkedin");
        if (TemporalObj == null) {
          if (i < 9) {
            removeObject("Linkedin_00" + String(i + 1));
          } else if (i >= 9) {
            removeObject("Linkedin_0" + String(i + 1));
          }
        }
        TemporalObj = dictGet(Json[i], "url_twitter");
        if (TemporalObj == null) {
          if (i < 9) {
            removeObject("twitter_00" + String(i + 1));
          } else if (i >= 9) {
            removeObject("twitter_0" + String(i + 1));
          }
        }
        TemporalObj = dictGet(Json[i], "url_web_page");
        if (TemporalObj == null) {
          if (i < 9) {
            removeObject("web_00" + String(i + 1));
          } else if (i >= 9) {
            removeObject("web_0" + String(i + 1));
          }
        }
      }
    }

    // convertToNumber puzzle
    function toNumber(text) {
      var num = Number(text);
      if (isNaN(num)) num = 0;
      return num;
    }

    // openWebPage puzzle
    function openWebPage(url, mode) {
      if (appInstance && appInstance.controls) {
        appInstance.controls.forceMouseUp();
      }

      if (mode == "NEW") {
        window.open(url);
      } else if (mode == "NO_RELOAD") {
        history.pushState("verge3d state", "verge3d page", url);
      } else {
        var target;
        switch (mode) {
          case "SAME":
            target = "_self";
            break;
          case "TOP":
            target = "_top";
            break;
          case "PARENT":
            target = "_parent";
            break;
        }
        if (typeof window.PE != "undefined") {
          if (window.confirm("Are you sure you want to leave Puzzles?"))
            window.open(url, target);
        } else {
          window.open(url, target);
        }
      }
    }

    // Describe this function...
    function VerificarStandPrensa(po) {
      console.log(po);
      NameURLPrensa = String(po.slice(-2)[0]) + String(po.slice(-1)[0]);
      if (po == "fb_prensa_0" + String(NameURLPrensa)) {
        playSound(soundPopUp, false);
        openWebPage(
          dictGet(JsonUrls[toNumber(NameURLPrensa) + 39], "url_facebook"),
          "NEW"
        );
      } else if (po == "twitter_prensa_0" + String(NameURLPrensa)) {
        playSound(soundPopUp, false);
        openWebPage(
          dictGet(JsonUrls[toNumber(NameURLPrensa) + 39], "url_twitter"),
          "NEW"
        );
      } else if (po == "Linkedin_prensa_0" + String(NameURLPrensa)) {
        playSound(soundPopUp, false);
        openWebPage(
          dictGet(JsonUrls[toNumber(NameURLPrensa) + 39], "url_linkedin"),
          "NEW"
        );
      } else if (po == "web_prensa_0" + String(NameURLPrensa)) {
        playSound(soundPopUp, false);
        openWebPage(
          dictGet(JsonUrls[toNumber(NameURLPrensa) + 39], "url_web_page"),
          "NEW"
        );
      } else if (po == "pdf_prensa_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        temporalSuma = 39 + toNumber(NameURLPrensa);
        getJSFunction("GetPickerPdf")(true, temporalSuma);
      } else if (po == "img_prensa_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        temporalSuma = 39 + toNumber(NameURLPrensa);
        getJSFunction("GetPickerImg")(true, temporalSuma);
      } else if (po == "xls_prensa_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        temporalSuma = 39 + toNumber(NameURLPrensa);
        getJSFunction("GetShowXLS")(true, temporalSuma);
      }
      if (po == "share_prensa_0" + String(nameUrlPlus)) {
        playSound(redesSolcaulke, false);

        operateAnimation(
          "SET_FRAME",
          "share_prensa_0" + String(NameURLPrensa),
          0,
          null,
          "AUTO",
          1,
          function () {},
          undefined,
          false
        );

        operateAnimation(
          "PLAY",
          "share_prensa_0" + String(NameURLPrensa),
          60,
          80,
          "LoopOnce",
          1,
          function () {
            operateAnimation(
              "PLAY",
              "Linkedin_prensa_0" + String(NameURLPrensa),
              80,
              190,
              "AUTO",
              1,
              function () {},
              undefined,
              false
            );

            operateAnimation(
              "PLAY",
              "fb_prensa_0" + String(NameURLPrensa),
              80,
              190,
              "AUTO",
              1,
              function () {},
              undefined,
              false
            );

            operateAnimation(
              "PLAY",
              "twitter_prensa_0" + String(NameURLPrensa),
              80,
              190,
              "AUTO",
              1,
              function () {},
              undefined,
              false
            );

            operateAnimation(
              "PLAY",
              "web_prensa_0" + String(NameURLPrensa),
              80,
              190,
              "AUTO",
              1,
              function () {},
              undefined,
              false
            );
          },
          undefined,
          false
        );
      }
    }

    // Describe this function...
    function VerifcarIconoStand(picked_object) {
      nameUrlPlus =
        String(picked_object.slice(-2)[0]) + String(picked_object.slice(-1)[0]);
      if (picked_object == "attendee_1_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        getJSFunction("getStaff")(true, toNumber(nameUrlPlus) - 1, 1);
      } else if (picked_object == "attendee_2_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        getJSFunction("getStaff")(true, toNumber(nameUrlPlus) - 1, 2);
      }
      if (picked_object == "fb_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        openWebPage(dictGet(JsonUrls[nameUrlPlus - 1], "url_facebook"), "NEW");
      } else if (picked_object == "Linkedin_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        openWebPage(dictGet(JsonUrls[nameUrlPlus - 1], "url_linkedin"), "NEW");
      } else if (picked_object == "twitter_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        openWebPage(dictGet(JsonUrls[nameUrlPlus - 1], "url_twitter"), "NEW");
      } else if (picked_object == "pdf_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        temporalSuma = -1 + toNumber(nameUrlPlus);
        getJSFunction("GetPickerPdf")(true, temporalSuma);
      } else if (picked_object == "web_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        openWebPage(dictGet(JsonUrls[nameUrlPlus - 1], "url_web_page"), "NEW");
      } else if (
        picked_object == "tv_0" + String(nameUrlPlus) ||
        picked_object == "tv_0" + String(nameUrlPlus)
      ) {
        playSound(soundPopUp, false);
        temporalSuma = -1 + toNumber(nameUrlPlus);
        getJSFunction("getVideo")(true, temporalSuma);
      } else if (picked_object == "img_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        temporalSuma = -1 + toNumber(nameUrlPlus);
        getJSFunction("GetPickerImg")(true, temporalSuma);
      } else if (picked_object == "css_pos_6x10_v2_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        temporalSuma = -1 + toNumber(nameUrlPlus);
        getJSFunction("getShowRRom")(true, temporalSuma);
      } else if (picked_object == "xls_0" + String(nameUrlPlus)) {
        playSound(soundPopUp, false);
        temporalSuma = -1 + toNumber(nameUrlPlus);
        getJSFunction("GetShowXLS")(true, temporalSuma);
      }
      if (picked_object == "share_0" + String(nameUrlPlus)) {
        playSound(redesSolcaulke, false);

        operateAnimation(
          "SET_FRAME",
          "share_0" + String(nameUrlPlus),
          0,
          null,
          "AUTO",
          1,
          function () {},
          undefined,
          false
        );

        operateAnimation(
          "PLAY",
          "share_0" + String(nameUrlPlus),
          60,
          80,
          "LoopOnce",
          1,
          function () {
            operateAnimation(
              "PLAY",
              "Linkedin_0" + String(nameUrlPlus),
              80,
              190,
              "AUTO",
              1,
              function () {},
              undefined,
              false
            );

            operateAnimation(
              "PLAY",
              "fb_0" + String(nameUrlPlus),
              80,
              190,
              "AUTO",
              1,
              function () {},
              undefined,
              false
            );

            operateAnimation(
              "PLAY",
              "twitter_0" + String(nameUrlPlus),
              80,
              190,
              "AUTO",
              1,
              function () {},
              undefined,
              false
            );

            operateAnimation(
              "PLAY",
              "web_0" + String(NameURLPrensa),
              80,
              190,
              "AUTO",
              1,
              function () {},
              undefined,
              false
            );
          },
          undefined,
          false
        );
      }
    }

    // show and hide puzzles
    function changeVis(objSelector, bool) {
      var objNames = retrieveObjectNames(objSelector);

      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;
        var obj = getObjectByName(objName);
        if (!obj) continue;
        obj.visible = bool;
      }
    }

    // tweenCamera puzzle
    function tweenCamera(
      posOrObj,
      targetOrObj,
      duration,
      doSlot,
      movementType
    ) {
      var camera = appInstance.getCamera();

      if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), "Y_UP_RIGHT");
      } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
      } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
      }

      if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(
          worldTarget,
          getCoordSystem(),
          "Y_UP_RIGHT"
        );
      } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
      }

      duration = Math.max(0, duration);

      if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
          appInstance.controls.tween(
            worldPos,
            worldTarget,
            duration,
            doSlot,
            movementType
          );
        }
      } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
          camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
      }
    }

    // outline puzzle
    function outline(objSelector, doWhat) {
      var objNames = retrieveObjectNames(objSelector);

      if (
        !appInstance.postprocessing ||
        !appInstance.postprocessing.outlinePass
      )
        return;
      var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
      for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj) continue;
        if (doWhat == "ENABLE") {
          if (outlineArray.indexOf(obj) == -1) outlineArray.push(obj);
        } else {
          var index = outlineArray.indexOf(obj);
          if (index > -1) outlineArray.splice(index, 1);
        }
      }
    }

    function AudioWebAudio() {
      this.audio = new v3d.Audio(new v3d.AudioListener());

      this._muted = false;
      this._volume = 1;
    }

    Object.assign(AudioWebAudio.prototype, {
      load: function (url) {
        var scope = this;

        var xhr = new XMLHttpRequest();
        xhr.open("GET", url);
        xhr.responseType = "arraybuffer";

        xhr.onload = function (e) {
          if (this.status === 200) {
            // new promise-based syntax is not currently supported in Safari
            scope.audio.context.decodeAudioData(
              this.response,
              function (decodedData) {
                scope.audio.setBuffer(decodedData);
              }
            );
          }
        };

        xhr.send();
        return this;
      },

      play: function () {
        if (this.audio.buffer === null) return;
        this.audio.play();
      },

      pause: function () {
        this.audio.pause();
      },

      stop: function () {
        if (this.audio.buffer === null) return;
        this.audio.stop();
      },

      rewind: function () {
        if (this.audio.buffer === null) return;

        var isPlaying = this.audio.isPlaying;
        this.audio.stop();
        if (isPlaying) {
          this.audio.play();
        }
      },

      setPlaybackTime: function (time) {
        // TODO: not easy with WebAudio
      },

      getPlaybackTime: function () {
        // TODO: not easy with WebAudio
        return 0;
      },

      setPlaybackRate: function (rate) {
        this.audio.setPlaybackRate(rate);
      },

      isPlaying: function () {
        return this.audio.isPlaying;
      },

      setLoop: function (looped) {
        this.audio.setLoop(looped);
      },

      setVolume: function (volume) {
        this._volume = volume;
        if (!this._muted) {
          this.audio.setVolume(volume);
        }
      },

      setMuted: function (muted) {
        this._muted = muted;
        this.audio.setVolume(muted ? 0 : this._volume);
      },
    });

    // loadMedia puzzle
    function loadMedia_WebAudio(url) {
      if (!v3d.Detector.checkWebAudio()) {
        if (!_pGlob.noWebAudioReported) {
          _pGlob.noWebAudioReported = true;
          console.warn("v3d.puzzles: Web Audio API not supported");
        }
        return null;
      }

      var elems = _pGlob.mediaElements;
      if (!(url in elems)) {
        elems[url] = new AudioWebAudio().load(url);
      }
      return elems[url];
    }

    // volume puzzle
    function volume(mediaElem, volume) {
      if (!mediaElem) return;

      volume = Number(volume);
      if (Number.isNaN(volume)) {
        return;
      }

      mediaElem.setVolume(v3d.MathUtils.clamp(volume, 0.0, 1.0));
    }

    isZoom = true;
    isPlay = false;
    is_music_play = false;

    setActiveCamera("cam_pos_1");

    video_test_jose = loadVideo(
      "https://res.cloudinary.com/yurand/video/upload/v1632258626/video_promo_concept_row2w6.mp4"
    );
    replaceTexture(
      "comercial_totem",
      "uv_for_video.png.001",
      video_test_jose,
      function () {}
    );
    playSound(video_test_jose, true);

    /* Set color picker on screen */

    for (J = 1; J <= 15; J++) {
      if (J < 10) {
        operateAnimation(
          "PLAY",
          "share_prensa_00" + String(J),
          1,
          59,
          "LoopRepeat",
          1,
          function () {},
          undefined,
          false
        );
      } else {
        operateAnimation(
          "PLAY",
          "share_prensa_0" + String(J),
          1,
          59,
          "LoopRepeat",
          1,
          function () {},
          undefined,
          false
        );
      }
    }
    for (J = 1; J <= 40; J++) {
      if (J < 10) {
        operateAnimation(
          "PLAY",
          "share_00" + String(J),
          1,
          59,
          "LoopRepeat",
          1,
          function () {},
          undefined,
          false
        );
      } else {
        operateAnimation(
          "PLAY",
          "share_0" + String(J),
          1,
          59,
          "LoopRepeat",
          1,
          function () {},
          undefined,
          false
        );
      }
    }

    registerOnClick(
      ["ALL_OBJECTS"],
      false,
      false,
      [0, 1, 2],
      function () {
        reproducirAnimacion_(_pGlob.pickedObject);
      },
      function () {}
    );

    /* Control de iconos */
    registerOnHover(
      "fb_001",
      false,
      function () {
        operateAnimation(
          "PLAY",
          "fb_001",
          129,
          190,
          "LoopRepeat",
          1,
          function () {},
          undefined,
          false
        );
      },
      function () {
        operateAnimation(
          "SET_FRAME",
          "fb_001",
          129,
          null,
          "AUTO",
          1,
          function () {},
          undefined,
          false
        );
      }
    );
    registerOnHover(
      "Linkedin_001",
      false,
      function () {
        operateAnimation(
          "PLAY",
          "Linkedin_001",
          129,
          190,
          "LoopRepeat",
          1,
          function () {},
          undefined,
          false
        );
      },
      function () {
        operateAnimation(
          "SET_FRAME",
          "Linkedin_001",
          129,
          null,
          "AUTO",
          1,
          function () {},
          undefined,
          false
        );
      }
    );
    registerOnHover(
      "twitter_001",
      false,
      function () {
        operateAnimation(
          "PLAY",
          "twitter_001",
          129,
          190,
          "LoopRepeat",
          1,
          function () {},
          undefined,
          false
        );
      },
      function () {
        operateAnimation(
          "SET_FRAME",
          "twitter_001",
          129,
          null,
          "AUTO",
          1,
          function () {},
          undefined,
          false
        );
      }
    );
    registerOnHover(
      "web_001",
      false,
      function () {
        operateAnimation(
          "PLAY",
          "web_001",
          129,
          190,
          "LoopRepeat",
          1,
          function () {},
          undefined,
          false
        );
      },
      function () {
        operateAnimation(
          "SET_FRAME",
          "web_001",
          129,
          null,
          "AUTO",
          1,
          function () {},
          undefined,
          false
        );
      }
    );

    navigationFPS = false;
    PositionsOfCameras = [
      [
        getObjTransform("cam_pos_1", "position", "x"),
        getObjTransform("cam_pos_1", "position", "y"),
        getObjTransform("cam_pos_1", "position", "z"),
      ],
      [
        getObjTransform("cam_pos_2", "position", "x"),
        getObjTransform("cam_pos_2", "position", "y"),
        getObjTransform("cam_pos_2", "position", "z"),
      ],
      [
        getObjTransform("cam_pos_4", "position", "x"),
        getObjTransform("cam_pos_4", "position", "y"),
        getObjTransform("cam_pos_4", "position", "z"),
      ],
      [
        getObjTransform("cam_pos_5", "position", "x"),
        getObjTransform("cam_pos_5", "position", "y"),
        getObjTransform("cam_pos_5", "position", "z"),
      ],
      [
        getObjTransform("cam_pos_6", "position", "x"),
        getObjTransform("cam_pos_6", "position", "y"),
        getObjTransform("cam_pos_6", "position", "z"),
      ],
      [
        getObjTransform("cam_pos_7", "position", "x"),
        getObjTransform("cam_pos_7", "position", "y"),
        getObjTransform("cam_pos_7", "position", "z"),
      ],
    ];

    registerInterval(0.3, function () {
      getJSFunction("UpdatePositionPlayer")(
        getObjTransform("cam_pos_1", "position", "x"),
        getObjTransform("cam_pos_1", "position", "y")
      );
    });

    eventHTMLElem("click", "location1", false, function (event) {
      reposiscionarPersonaje(0);
    });
    eventHTMLElem("click", "location2", false, function (event) {
      reposiscionarPersonaje(1);
    });
    eventHTMLElem("click", "location3", false, function (event) {
      reposiscionarPersonaje(2);
    });
    eventHTMLElem("click", "location4", false, function (event) {
      reposiscionarPersonaje(3);
    });
    eventHTMLElem("click", "location5", false, function (event) {
      reposiscionarPersonaje(4);
    });
    eventHTMLElem("click", "location6", false, function (event) {
      reposiscionarPersonaje(5);
    });

    OpenMap = true;
    eventHTMLElem("click", "map", false, function (event) {
      playSound(soundPopUp, false);
      if (OpenMap) {
        setHTMLElemStyle("display", "none", "hideElement", false);
        OpenMap = false;
      } else {
        setHTMLElemStyle("display", "flex", "hideElement", false);
        OpenMap = true;
      }
    });

    SoundHover;

    SoundHover;

    SoundHover;

    RedesSocilaesEspeciales2 = [
      49.206214904785156, 48.58777618408203, 48.0169792175293,
      47.45578384399414,
    ];
    RedesSocialesEspeciales1 = [
      32.51710510253906, 31.898666381835938, 31.327869415283203,
      30.766674041748047,
    ];
    RedesSVerticales = [
      1.7254910469055176, 1.3534338474273682, 1.0149396657943726,
      0.6157270669937134,
    ];
    ListaAlinearRS = [];
    CondicionalResposicionamiento = 0;

    RedesSocialesPrensa = [
      94.82878112792969, 94.45262908935547, 94.08549499511719, 93.7349853515625,
    ];

    n;

    registerOnClick(
      ["ALL_OBJECTS"],
      false,
      false,
      [0, 1, 2],
      function () {
        VerifcarIconoStand(_pGlob.pickedObject);
        VerificarStandPrensa(_pGlob.pickedObject);
      },
      function () {}
    );

    JsonUrls = getJSFunction("GetURLJson")();
    if (JsonUrls.length > 0) {
      console.log("pasaron 10 seg");
      console.log(JsonUrls);
      AlinearObjetosRedesSociales(JsonUrls);
      AlinearObjetosRedesSocialesprensa(JsonUrls);
      EsconderParametrosNoEncontrados(JsonUrls);
      EconderPrensa(JsonUrls);
    }

    dictGet(po, "url_facebook");

    ("web_prensa_001");

    getObjTransform(
      "web_prensa_0" + String(Var2Ultimasletras),
      "position",
      "xyz"
    );

    ("web_prensa_015");

    p;

    soundPopUp;

    ("<none>");

    i;

    i;

    soundPopUp;

    eventHTMLElem("click", "CloseIframe", false, function (event) {
      playSound(soundClose, false);
      getJSFunction("getIframeEquipo")(false, 0);
      setHTMLElemStyle("display", "none", "CloseIframe", false);
      changeVis(["ALL_OBJECTS"], true);
      changeVis("Plane.010", false);
    });

    paths = getJSFunction("GetAuthPaths")();
    openB2bConference = false;
    registerOnClick(
      "btn_auditroom",
      false,
      false,
      [0, 1, 2],
      function () {
        playSound(soundPopUp, false);
        for (var o_index in paths) {
          o = paths[o_index];
          console.log(dictGet(o, "name"));
          if (dictGet(o, "name") == "plenaryHall") {
            openB2bConference = true;
          }
        }
        if (openB2bConference == true) {
          openWebPage("/conferencia", "SAME");
        } else {
          setHTMLElemStyle("display", "flex", "mensajeDenegacion", false);
          openB2bConference = false;
        }
      },
      function () {}
    );
    eventHTMLElem("click", "closeACD", false, function (event) {
      setHTMLElemStyle("display", "none", "mensajeDenegacion", false);
      playSound(soundClose, false);
    });

    registerOnClick(
      "btn_dg_1_40",
      false,
      false,
      [0, 1, 2],
      function () {
        tweenCamera("", "btn_dg_1_40", 0, function () {}, 0);
        playSound(equipo3d, false);
        urlEquipos = "https://uso-del-agua-en-operaciones.vercel.app/";
        getJSFunction("getIframeEquipo")(true, urlEquipos);
        setHTMLElemStyle("display", "flex", "CloseIframe", false);
        registerSetTimeout(1, function () {
          changeVis(["ALL_OBJECTS"], false);
        });
      },
      function () {}
    );
    registerOnClick(
      "btn_dg_2_40",
      false,
      false,
      [0, 1, 2],
      function () {
        tweenCamera("", "btn_dg_1_40", 0, function () {}, 0);
        playSound(equipo3d, false);
        urlEquipos = "https://proceso-de-suministro-de-agua.vercel.app/";
        getJSFunction("getIframeEquipo")(true, urlEquipos);
        setHTMLElemStyle("display", "flex", "CloseIframe", false);
        registerSetTimeout(1, function () {
          changeVis(["ALL_OBJECTS"], false);
        });
      },
      function () {}
    );

    registerOnClick(
      "btn_b2b",
      false,
      false,
      [0, 1, 2],
      function () {
        playSound(soundPopUp, false);
        for (var o_index2 in paths) {
          o = paths[o_index2];
          console.log(dictGet(o, "name"));
          if (dictGet(o, "name") == "businessConference") {
            openB2bConference = true;
          }
        }
        if (openB2bConference == true) {
          openWebPage("/B2B/", "SAME");
        } else {
          setHTMLElemStyle("display", "flex", "mensajeDenegacion", false);
          openB2bConference = false;
        }
      },
      function () {}
    );

    eventHTMLElem("click", "auditorio", false, function (event) {
      playSound(soundPopUp, false);
      for (var o_index3 in paths) {
        o = paths[o_index3];
        console.log(dictGet(o, "name"));
        if (dictGet(o, "name") == "businessConference") {
          openB2bConference = true;
        }
      }
      if (openB2bConference == true) {
        openWebPage("/B2B/", "SAME");
      } else {
        setHTMLElemStyle("display", "flex", "mensajeDenegacion", false);
        openB2bConference = false;
      }
    });
    eventHTMLElem("click", "B2B", false, function (event) {
      playSound(soundPopUp, false);
      for (var o_index4 in paths) {
        o = paths[o_index4];
        console.log(dictGet(o, "name"));
        if (dictGet(o, "name") == "businessConference") {
          openB2bConference = true;
        }
      }
      if (openB2bConference == true) {
        openWebPage("/B2B/", "SAME");
      } else {
        setHTMLElemStyle("display", "flex", "mensajeDenegacion", false);
        openB2bConference = false;
      }
    });

    boolInformacion = false;
    setHTMLElemStyle("display", "none", "bgInformacion", false);
    setHTMLElemStyle("display", "flex", "informacion", false);
    eventHTMLElem("click", "informacion", false, function (event) {
      if (boolInformacion == false) {
        playSound(soundInformaicon, false);
        setHTMLElemStyle("display", "flex", "bgInformacion", false);
        boolInformacion = true;
      } else if (boolInformacion == true) {
        setHTMLElemStyle("display", "none", "bgInformacion", false);
        boolInformacion = false;
      }
    });
    eventHTMLElem("click", "CerrarInformacion", false, function (event) {
      playSound(soundClose, false);
      setHTMLElemStyle("display", "none", "bgInformacion", false);
      boolInformacion = false;
    });

    eventHTMLElem("click", "showRoom", false, function (event) {
      console.log("buttonIframe");
      changeVis(["ALL_OBJECTS"], true);
      setHTMLElemStyle("display", "flex", "ElementShowRoom", false);
    });
    eventHTMLElem("click", "CloseShowRoom", false, function (event) {
      console.log("buttonIframe");
      changeVis(["ALL_OBJECTS"], true);
      changeVis("Plane.010", false);
      setHTMLElemStyle("display", "none", "ElementShowRoom", false);
    });

    0;

    registerOnHover(
      "btn_dg_1_40",
      false,
      function () {
        playSound(SoundHover, false);
        outline("btn_dg_1_40", "ENABLE");
      },
      function () {
        outline("btn_dg_1_40", "DISABLE");
      }
    );
    registerOnHover(
      "btn_dg_2_40",
      false,
      function () {
        playSound(SoundHover, false);
        outline("btn_dg_2_40", "ENABLE");
      },
      function () {
        outline("btn_dg_2_40", "DISABLE");
      }
    );

    eventHTMLElem("click", "teleportMap", false, function (event) {
      playSound(mapaSopund, false);
    });
    eventHTMLElem("click", "teleportMap2", false, function (event) {
      playSound(mapaSopund, false);
    });
    eventHTMLElem("click", "teleportMap3", false, function (event) {
      playSound(mapaSopund, false);
    });
    eventHTMLElem("click", "teleportMap4", false, function (event) {
      playSound(mapaSopund, false);
    });
    eventHTMLElem("click", "teleportMap5", false, function (event) {
      playSound(mapaSopund, false);
    });
    eventHTMLElem("click", "teleportMap6", false, function (event) {
      playSound(mapaSopund, false);
    });

    eventHTMLElem("click", "CloseIframe", false, function (event) {
      playSound(soundClose, false);
    });
    eventHTMLElem("click", "closeCalendy", false, function (event) {
      playSound(soundClose, false);
    });
    eventHTMLElem("click", "buttonXLS", false, function (event) {
      playSound(soundClose, false);
    });
    eventHTMLElem("click", "buttonStaff", false, function (event) {
      playSound(soundClose, false);
    });
    eventHTMLElem("click", "CloseIframe", false, function (event) {
      playSound(soundClose, false);
    });
    eventHTMLElem("click", "buttonImg", false, function (event) {
      playSound(soundClose, false);
    });
    eventHTMLElem("click", "CloseIframe", false, function (event) {
      playSound(soundClose, false);
    });
    eventHTMLElem("click", "ShowRRoom", false, function (event) {
      playSound(soundClose, false);
    });
    eventHTMLElem("click", "buttonVideo", false, function (event) {
      playSound(soundClose, false);
    });
    eventHTMLElem("click", "HidePdf", false, function (event) {
      playSound(soundClose, false);
    });
    eventHTMLElem("click", "CloseShowRoom", false, function (event) {
      playSound(soundClose, false);
    });

    registerOnHover(
      ["ALL_OBJECTS"],
      false,
      function () {
        varHovered = _pGlob.hoveredObject;
        tmeporaOutline =
          String(varHovered.slice(-2)[0]) + String(varHovered.slice(-1)[0]);
        if (
          _pGlob.hoveredObject == "fb_0" + String(tmeporaOutline) ||
          _pGlob.hoveredObject == "fb_prensa_0" + String(tmeporaOutline)
        ) {
          playSound(SoundHover, false);
          outline(_pGlob.hoveredObject, "ENABLE");
        } else if (
          _pGlob.hoveredObject == "Linkedin_0" + String(tmeporaOutline) ||
          _pGlob.hoveredObject == "Linkedin_prensa_0" + String(tmeporaOutline)
        ) {
          playSound(SoundHover, false);
          outline(_pGlob.hoveredObject, "ENABLE");
        } else if (
          _pGlob.hoveredObject == "twitter_0" + String(tmeporaOutline) ||
          _pGlob.hoveredObject == "twitter_prensa_0" + String(tmeporaOutline)
        ) {
          playSound(SoundHover, false);
          outline(_pGlob.hoveredObject, "ENABLE");
        } else if (
          _pGlob.hoveredObject == "web_0" + String(tmeporaOutline) ||
          _pGlob.hoveredObject == "web_prensa_0" + String(tmeporaOutline)
        ) {
          playSound(SoundHover, false);
          outline(_pGlob.hoveredObject, "ENABLE");
        } else if (_pGlob.hoveredObject == "tv_0" + String(tmeporaOutline)) {
          playSound(SoundHover, false);
          outline(_pGlob.hoveredObject, "ENABLE");
        } else if (
          _pGlob.hoveredObject == "img_0" + String(tmeporaOutline) ||
          _pGlob.hoveredObject == "img_prensa_0" + String(tmeporaOutline)
        ) {
          playSound(SoundHover, false);
          outline(_pGlob.hoveredObject, "ENABLE");
        } else if (
          _pGlob.hoveredObject == "xls_0" + String(tmeporaOutline) ||
          _pGlob.hoveredObject == "xls_prensa_0" + String(tmeporaOutline)
        ) {
          playSound(SoundHover, false);
          outline(_pGlob.hoveredObject, "ENABLE");
        } else if (
          _pGlob.hoveredObject == "attendee_1_0" + String(tmeporaOutline) ||
          _pGlob.hoveredObject == "attendee_2_0" + String(tmeporaOutline)
        ) {
          playSound(SoundHover, false);
          outline(_pGlob.hoveredObject, "ENABLE");
        } else if (
          _pGlob.hoveredObject == "pdf_0" + String(tmeporaOutline) ||
          _pGlob.hoveredObject == "pdf_prensa_0" + String(tmeporaOutline)
        ) {
          playSound(SoundHover, false);
          outline(_pGlob.hoveredObject, "ENABLE");
        } else if (
          _pGlob.hoveredObject == "btn_auditroom" ||
          _pGlob.hoveredObject == "btn_b2b"
        ) {
          playSound(SoundHover, false);
          outline(_pGlob.hoveredObject, "ENABLE");
        } else if (
          _pGlob.hoveredObject == "share_0" + String(tmeporaOutline) ||
          _pGlob.hoveredObject == "share_prensa_0" + String(tmeporaOutline)
        ) {
          playSound(SoundHover, false);
          outline(_pGlob.hoveredObject, "ENABLE");
        }
      },
      function () {
        outline(_pGlob.hoveredObject, "DISABLE");
      }
    );

    ("cam_pos_1");

    SoundHover = loadMedia_WebAudio("");
    soundTeleport = loadMedia_WebAudio(
      "https://media.publit.io/file/imgPdfXLS.mp3"
    );
    soundClose = loadMedia_WebAudio("https://media.publit.io/file/pup.mp3");
    soundPopUp = loadMedia_WebAudio("https://media.publit.io/file/pop2.mp3");
    soundInformaicon = loadMedia_WebAudio(
      "https://media.publit.io/file/Informacion.mp3"
    );
    mapaSopund = loadMedia_WebAudio("https://media.publit.io/file/sdf-N.mp3");
    redesSolcaulke = loadMedia_WebAudio(
      "https://media.publit.io/file/PopUp.mp3"
    );
    equipo3d = loadMedia_WebAudio("https://media.publit.io/file/equipo3d.mp3");
    volume(soundInformaicon, 0.5);
  }; // end of PL.init function
})(); // end of closure

/* ================================ end of code ============================= */
