/* __V3D_TEMPLATE__ - template-based file; delete this line to prevent this file from being updated */

/* eslint-disable */
import { saveAs } from "file-saver";
import { getStandData } from "../../services/Feria3D";
import Storage from "../../storage";
// import * as v3dModule from '../complements/v3d.module'
var CONTAINER_ID = "v3d-container";

var color = 0x000000;
var urlFacebook = [];
var pos_x = 0;
var pos_y = 0;

var varOpenPdf = false;
var videoPlayer = false;
var varOpenImg = false;
var varCalendy = false;
var varShowRoom = false;
var varXLS = false;
var variframe = false;
var var_Staff = false;

var id_pdf = 0;
var id_img = 0;
var id_video = 0;
var id_Showroom = 0;
var id_calendy = 0;
var id_xls = 0;
var LinkVercelEquipo = 0;
var id_Staff = 0;
var id_tipo_Staff = 0;

var auth = [];

/**
 * Path to prepend to request URLs for the scene .gltf file and the visual logic
 * .js file.
 */
var REL_URL_PREFIX = "v3dApp/";

/**
 * Load the visual logic .js and/or .xml file or not. The Puzzles Editor is
 * currently not fully supported.
 * See: https://www.soft8soft.com/docs/manual/en/programmers_guide/Integration-with-Reactjs-Vuejs.html#using_the_puzzles_editor
 */
var LOAD_LOGIC_FILES = true;

function createApp() {
  var params = v3d.AppUtils.getPageParams();

  var PUZZLES_DIR = "/puzzles/";
  var logicURL = params.logic
    ? params.logic
    : "__LOGIC__visual_logic.js".replace("__LOGIC__", REL_URL_PREFIX);
  var sceneURL = params.load
    ? params.load
    : "__URL__stands.gltf".replace("__URL__", REL_URL_PREFIX);
  if (!sceneURL) {
    // console.log("No scene URL specified");
    return;
  }

  // some puzzles can benefit from cache
  v3d.Cache.enabled = true;

  return new Promise(function (resolve) {
    if (LOAD_LOGIC_FILES) {
      if (v3d.AppUtils.isXML(logicURL)) {
        var logicURLJS = logicURL.match(/(.*)\.xml$/)[1] + ".js";
        new v3d.PuzzlesLoader().loadEditorWithLogic(
          PUZZLES_DIR,
          logicURLJS,
          function () {
            var initOptions = v3d.PL
              ? v3d.PL.execInitPuzzles({
                  container: CONTAINER_ID,
                }).initOptions
              : { useFullscreen: true };
            var appInstance = loadScene(sceneURL, initOptions);
            v3d.PE.viewportUseAppInstance(appInstance);
            resolve(appInstance);
          }
        );
      } else if (v3d.AppUtils.isJS(logicURL)) {
        new v3d.PuzzlesLoader().loadLogic(logicURL, function () {
          var initOptions = v3d.PL
            ? v3d.PL.execInitPuzzles({
                container: CONTAINER_ID,
              }).initOptions
            : { useFullscreen: true };
          resolve(loadScene(sceneURL, initOptions));
        });
      } else {
        resolve(loadScene(sceneURL, { useFullscreen: true }));
      }
    } else {
      resolve(loadScene(sceneURL, { useFullscreen: true }));
    }
  }).catch(function (err) {
    console.error(err);
  });
}

function loadScene(sceneURL, initOptions) {
  initOptions = initOptions || {};

  var ctxSettings = {};
  if (initOptions.useBkgTransp) ctxSettings.alpha = true;
  if (initOptions.preserveDrawBuf) ctxSettings.preserveDrawingBuffer = true;

  var preloader = initOptions.useCustomPreloader
    ? createCustomPreloader(
        initOptions.preloaderProgressCb,
        initOptions.preloaderEndCb
      )
    : new v3d.SimplePreloader({ container: CONTAINER_ID });

  if (v3d.PE) {
    puzzlesEditorPreparePreloader(preloader);
  }

  var app = new v3d.App(CONTAINER_ID, ctxSettings, preloader);
  if (initOptions.useBkgTransp) {
    app.clearBkgOnLoad = true;
    app.renderer.setClearColor(0x000000, 0);
  }

  // namespace for communicating with code generated by Puzzles
  app.ExternalInterface = {};
  prepareExternalInterface(app);

  if (initOptions.preloaderStartCb) initOptions.preloaderStartCb();
  if (initOptions.useFullscreen) {
    initFullScreen();
  } else {
    var fsButton = document.getElementById("fullscreen_button");
    if (fsButton) fsButton.style.display = "none";
  }

  sceneURL = initOptions.useCompAssets ? sceneURL + ".xz" : sceneURL;
  app.loadScene(
    sceneURL,
    function () {
      app.enableControls();
      app.run();

      if (v3d.PE) v3d.PE.updateAppInstance(app);
      if (v3d.PL) v3d.PL.init(app, initOptions);

      runCode(app);
    },
    null,
    function () {
      // console.log("Can't load the scene " + sceneURL);
    }
  );

  return app;
}

function createCustomPreloader(updateCb, finishCb) {
  function CustomPreloader() {
    v3d.Preloader.call(this);
  }

  CustomPreloader.prototype = Object.assign(
    Object.create(v3d.Preloader.prototype),
    {
      onUpdate: function (percentage) {
        v3d.Preloader.prototype.onUpdate.call(this, percentage);
        if (updateCb) updateCb(percentage);
      },
      onFinish: function () {
        v3d.Preloader.prototype.onFinish.call(this);
        if (finishCb) finishCb();
      },
    }
  );

  return new CustomPreloader();
}

/**
 * Modify the app's preloader to track the loading process in the Puzzles Editor.
 */
function puzzlesEditorPreparePreloader(preloader) {
  // backward compatibility for loading new projects within the old Puzzles Editor
  if (
    v3d.PE.loadingUpdateCb !== undefined &&
    v3d.PE.loadingFinishCb !== undefined
  ) {
    var _onUpdate = preloader.onUpdate.bind(preloader);
    preloader.onUpdate = function (percentage) {
      _onUpdate(percentage);
      v3d.PE.loadingUpdateCb(percentage);
    };

    var _onFinish = preloader.onFinish.bind(preloader);
    preloader.onFinish = function () {
      _onFinish();
      v3d.PE.loadingFinishCb();
    };
  }
}

function initFullScreen() {
  var fsButton = document.getElementById("fullscreen_button");
  if (!fsButton) return;

  var container = document.getElementById(CONTAINER_ID);

  if (
    document.fullscreenEnabled ||
    document.webkitFullscreenEnabled ||
    document.mozFullScreenEnabled ||
    document.msFullscreenEnabled
  )
    fsButton.style.display = "inline";

  fsButton.addEventListener("click", function (event) {
    event.stopPropagation();
    if (
      document.fullscreenElement ||
      document.webkitFullscreenElement ||
      document.mozFullScreenElement ||
      document.msFullscreenElement
    ) {
      exitFullscreen();
    } else requestFullscreen(container);
  });

  function changeFullscreen() {
    if (
      document.fullscreenElement ||
      document.webkitFullscreenElement ||
      document.mozFullScreenElement ||
      document.msFullscreenElement
    ) {
      fsButton.classList.remove("fullscreen-open");
      fsButton.classList.add("fullscreen-close");
    } else {
      fsButton.classList.remove("fullscreen-close");
      fsButton.classList.add("fullscreen-open");
    }
  }

  document.addEventListener("webkitfullscreenchange", changeFullscreen);
  document.addEventListener("mozfullscreenchange", changeFullscreen);
  document.addEventListener("msfullscreenchange", changeFullscreen);
  document.addEventListener("fullscreenchange", changeFullscreen);

  function requestFullscreen(elem) {
    if (elem.requestFullscreen) elem.requestFullscreen();
    else if (elem.mozRequestFullScreen) elem.mozRequestFullScreen();
    else if (elem.webkitRequestFullscreen) elem.webkitRequestFullscreen();
    else if (elem.msRequestFullscreen) elem.msRequestFullscreen();
  }

  function exitFullscreen() {
    if (document.exitFullscreen) document.exitFullscreen();
    else if (document.mozCancelFullScreen) document.mozCancelFullScreen();
    else if (document.webkitExitFullscreen) document.webkitExitFullscreen();
    else if (document.msExitFullscreen) document.msExitFullscreen();
  }
}

function prepareExternalInterface(app) {
  app.ExternalInterface.DownloadDocument = function (fileName, uri) {
    saveAs(uri, `${fileName}`);
  };

  app.ExternalInterface.LoadVariableCOlor = function () {
    return color;
  };

  app.ExternalInterface.UpdatePositionPlayer = function (px, py) {
    pos_x = px;
    pos_y = py;
  };

  app.ExternalInterface.GetURLJson = function () {
    return urlFacebook;
  };

  app.ExternalInterface.GetAuthPaths = function () {
    return auth;
  };

  app.ExternalInterface.GetPickerPdf = function (pdfPicker, id) {
    varOpenPdf = pdfPicker;
    id_pdf = id;
  };

  app.ExternalInterface.GetPickerImg = function (varTemporal, id) {
    varOpenImg = varTemporal;
    id_img = id;
  };

  app.ExternalInterface.getVideo = async function (VideoPicker, id) {
    videoPlayer = VideoPicker;
    id_video = id;
  };

  app.ExternalInterface.getShowRRom = async function (showRRom, id) {
    varShowRoom = showRRom;
    id_Showroom = id;
  };

  app.ExternalInterface.GetShowXLS = async function (xls, id) {
    varXLS = xls;
    id_xls = id;
  };

  app.ExternalInterface.getCalendary = async function (ca, id) {
    varCalendy = ca;
    id_calendy = id;
  };

  app.ExternalInterface.getStaff = async function (staff, id, tipo) {
    var_Staff = staff;
    id_Staff = id;
    id_tipo_Staff = tipo;
  };

  app.ExternalInterface.getIframeEquipo = async function (varE, link) {
    variframe = varE;
    LinkVercelEquipo = link;
  };
}

function getColor(rgbColor) {
  color = rgbColor.rgb;
}
async function SetJsonStands() {
  auth = JSON.parse(Storage.getAuthPaths());

  try {
    const response = await getStandData();
    urlFacebook = response.data;
    // console.log(urlFacebook);
  } catch (error) {
    // console.log("error");
  }
}

function getPositionPlayerX() {
  return pos_x;
}
function getPositionPlayerY() {
  return pos_y;
}

function getVarOpenPdf() {
  return varOpenPdf;
}
function getVarID_pdf() {
  return id_pdf;
}
function setVarOpenPdf(f) {
  varOpenPdf = f;
}

function setVarOpenVideo(f) {
  videoPlayer = f;
}
function getVarOpenVideo() {
  return videoPlayer;
}
function getVarID_video() {
  return id_video;
}

function setVarGoogleMeet(f) {
  varShowRoom = f;
}
function getVarGoogleMeet() {
  return varShowRoom;
}
function getVarID_GoogleMeet() {
  return id_Showroom;
}

function getVarOpen_Img() {
  return varOpenImg;
}
function getVarID_Img() {
  return id_img;
}
function setVarOpen_Img(f) {
  varOpenImg = f;
}

function getVarCalendy() {
  return varCalendy;
}
function getVarID_Calendy() {
  return id_calendy;
}
function setVarShowCalendy(f) {
  varCalendy = f;
}

function getVar_XLS() {
  return varXLS;
}
function getVarID_XLS() {
  return id_xls;
}
function setVarShow_XLS(f) {
  varXLS = f;
}

function getVar_Iframe() {
  return variframe;
}
function getVarLinkVercelEquipo() {
  return LinkVercelEquipo;
}
function setVarShow_Iframe(f) {
  variframe = f;
}

function getVar_Staff() {
  return var_Staff;
}
function getVarID_Staff() {
  return id_Staff;
}
function setVarShow_Staff(f) {
  var_Staff = f;
}
function getVarShow_id_tipoStaff() {
  return id_tipo_Staff;
}

function getVarID_UrlFacebbok() {
  return urlFacebook;
}

function runCode(app) {}

export {
  createApp,
  CONTAINER_ID,
  getColor,
  getPositionPlayerX,
  getPositionPlayerY,
  SetJsonStands,
  getVarOpenPdf,
  getVarID_pdf,
  setVarOpenPdf,
  getVarOpen_Img,
  getVarID_Img,
  setVarOpen_Img,
  getVarOpenVideo,
  setVarOpenVideo,
  getVarID_video,
  setVarGoogleMeet,
  getVarGoogleMeet,
  getVarID_GoogleMeet,
  getVarCalendy,
  getVarID_Calendy,
  setVarShowCalendy,
  getVar_XLS,
  getVarID_XLS,
  setVarShow_XLS,
  getVar_Iframe,
  getVarLinkVercelEquipo,
  setVarShow_Iframe,
  getVarID_UrlFacebbok,
  getVar_Staff,
  getVarID_Staff,
  setVarShow_Staff,
  getVarShow_id_tipoStaff,
};
